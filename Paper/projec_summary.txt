=======
Add tracing points
# Connect threads
#1. from kernel, on mach message
	"MACH_IPC_msg_" \
	"MACH_IPC_kmsg_free" \
	"MACH_IPC_voucher_info" \
	"MACH_IPC_voucher_"\
	"Bank_Account_redeem" \

# Connect threads : wait and makerunnable
# Exclude false connection : interrupt ts_maintainance
# provise hint: wait_reason and wakeup_reason
#2. from kernel, thread scheduling
	"INTERRUPT" \
	"MACH_TS_MAINTENANCE" \
	"MACH_MKRUNNABLE" \
	"MACH_WAKEUP_REASON" \
	"MACH_WAIT" \
	"MACH_WAIT_REASON" \

# Connect threads: enqueue, dequeue and execute
# Bondary : wq__run_nextitem, dispath_execute
#3. from libdispatch, worker thread operations
	"wq__run_nextitem" \
	"dispatch_enqueue" \
	"dispatch_dequeue" \
	"dispatch_execute" \

# Connect treads
#4. from kernel, timer operations
	"MACH_CALLCREATE" \
	"MACH_CALLOUT" \
	"MACH_CALLCANCEL" \

#provide hints, synchronization calls help to align logs from normal and spinning cases
#5. from kernel. systemcall
	"MSC_" \
	"BSC_" \

#provide hints, efficient backtrace, maximum 32 frames unwind with valid rbp
#6. hooked to any libs, backtrace info
	"MSG_Pathinfo" \
	"MSG_Backtrace" \

#provide hints
#7. from Frameworks
	#7,1 QuartzCore
	"CALayerSet" \
	"CALayerDisplay" \
	#7.2 CoreFoundation
	"RL_Observer" \
	#7.3 HIToolbox
	"EventRef" \
	#7.4 AppKit
	"NSAppGetEvent" \ 
	"NSEvent" \ 

#ad-hoc to helps to align logs from normal and spinning cases
#8. external set for shared variables, eg, isDispatchToMainThread, isMainThreadSpinning
	"HWBR_trap" \

=======
analysis:
1. identify the execution segment boundary
	Batch processing progaming paradigm: dispath_mig_service, runloop(blocks, dispath sources.etc)
	Dispatch_execution for one request from dispatch queue
	Kernel event processing:
	1. isolate event introduce by Interrupt or TimeshareMaintainance
	2. kernel thread processing the list processes on timers(sent out messages)

	More hueristics:
	1. wait event 
	2. mach_msg to a different application without corresponding voucher
	.etc

2. Connect execution segments into dependancy graph
	2.1. mach_msg sent-recv, mach_msg carrying reply port in kernel
	2.2. Wait, Wakeup, exclude Interrupts, TimeshareMaintaince
	2.3. dispatch operations between threads
	2.4. timer arm/callouts
	2.5. shared variable

It will not generate an correct and complet depandency graph.
Instead, it provides the relationships between threads helps to confine the bug range.

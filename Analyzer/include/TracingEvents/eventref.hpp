#ifndef EVENT_REF_HPP
#define EVENT_REF_HPP
#include "base.hpp"

typedef enum {
  /*
   * Events related to the mouse (mouse down/up/moved).
   */
  kEventClassMouse              = 'mous',

  /*
   * Events related to the keyboard.
   */
  kEventClassKeyboard           = 'keyb',

  /*
   * Events related to text input (by keyboard, or by input method).
   */
  kEventClassTextInput          = 'text',

  /*
   * Application-level events (launch, quit, etc.).
   */
  kEventClassApplication        = 'appl',

  /*
   * Apple Events.
   */
  kEventClassAppleEvent         = 'eppc',

  /*
   * Events related to menus.
   */
  kEventClassMenu               = 'menu',

  /*
   * Events related to windows.
   */
  kEventClassWindow             = 'wind',

  /*
   * Events related to controls.
   */
  kEventClassControl            = 'cntl',

  /*
   * Events related to commands generated by menu items or controls.
   * These events contain HICommand structures.
   */
  kEventClassCommand            = 'cmds',

  /*
   * Events related to tablets.
   */
  kEventClassTablet             = 'tblt',

  /*
   * Events related to File Manager volumes.
   */
  kEventClassVolume             = 'vol ',

  /*
   * Events related to the Appearance Manager.
   */
  kEventClassAppearance         = 'appm',

  /*
   * Events related to the Services Manager.
   */
  kEventClassService            = 'serv',

  /*
   * Events related to toolbars.
   */
  kEventClassToolbar            = 'tbar',

  /*
   * Events related to toolbar items.
   */
  kEventClassToolbarItem        = 'tbit',

  /*
   * Events related to toolbar item views.
   */
  kEventClassToolbarItemView    = 'tbiv',

  /*
   * Events related to application accessibility.
   */
  kEventClassAccessibility      = 'acce',

  /*
   * Events related to the system.
   */
  kEventClassSystem             = 'macs',

  /*
   * Events related to Ink.
   */
  kEventClassInk                = 'ink ',
  kEventClassTSMDocumentAccess  = 'tdac',

  /*
   * Events related to gestures: magnify, swipe, rotate.
   */
  kEventClassGesture            = 'gest'
} event_class_t;

/*
    kEventClassKeyboard quick reference:
*/
 typedef enum {  
    kEventRawKeyDown                = 1,
    kEventRawKeyRepeat              = 2,
    kEventRawKeyUp                  = 3,
    kEventRawKeyModifiersChanged    = 4,
    kEventHotKeyPressed             = 5,
    kEventHotKeyReleased            = 6
} kEventClassKeyboradKind_t;


class CoreGraphicsRefEvent : public EventBase {
    uint64_t cgs_event_addr;
    uint64_t cgs_event_class;
    uint64_t cgs_event_kind;
    uint64_t key_code;
public:
    CoreGraphicsRefEvent(double timestamp, std::string op, uint64_t tid, uint64_t event_addr, 
        uint64_t event_class, uint64_t event_kind, uint64_t keycode, uint32_t coreid, std::string procname = "");
    uint64_t get_class() {return cgs_event_class;}
    uint64_t get_kind() {return cgs_event_kind;}
    const char *decode_keycode(int keyCode);
    const char *decode_keykind(int keyKind);
    void decode_event(bool is_verbose, std::ofstream &outfile);
    void streamout_event(std::ofstream &outfile);
};
#endif

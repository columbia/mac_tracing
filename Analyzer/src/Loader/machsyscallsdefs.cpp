/* automatically generated with script */
/* modified to add syscall 58 pfz_exit and 100 iokit_user_client */
#include "loader.hpp"
namespace LoadData
{
	const struct syscall_entry mach_syscall_table[] = {
		{10,	"mach_vm_allocate_trap",
	{"mach_port_name_t_target","mach_vm_offset_t_*addr","mach_vm_size_t_size","int_flags"}},
		{12,	"mach_vm_deallocate_trap",
	{"mach_port_name_t_target","mach_vm_address_t_address","mach_vm_size_t_size"}},
		{14,	"mach_vm_protect_trap",
	{"mach_port_name_t_target","mach_vm_address_t_address","mach_vm_size_t_size","boolean_t_set_maximum","vm_prot_t_new_protection"}},
		{15,	"mach_vm_map_trap",
	{"mach_port_name_t_target","mach_vm_offset_t_*address","mach_vm_size_t_size","mach_vm_offset_t_mask","int_flags","vm_prot_t_cur_protection"}},
		{16,	"mach_port_allocate_trap",
	{"mach_port_name_t_target","mach_port_right_t_right","mach_port_name_t_*name"}},
		{17,	"mach_port_destroy_trap",
	{"mach_port_name_t_target","mach_port_name_t_name"}},
		{18,	"mach_port_deallocate_trap",
	{"mach_port_name_t_target","mach_port_name_t_name"}},
		{19,	"mach_port_mod_refs_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","mach_port_right_t_right","mach_port_delta_t_delta"}},
		{20,	"mach_port_move_member_trap",
	{"mach_port_name_t_target","mach_port_name_t_member","mach_port_name_t_after"}},
		{21,	"mach_port_insert_right_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","mach_port_name_t_poly","mach_msg_type_name_t_polyPoly"}},
		{22,	"mach_port_insert_member_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","mach_port_name_t_pset"}},
		{23,	"mach_port_extract_member_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","mach_port_name_t_pset"}},
		{24,	"mach_port_construct_trap",
	{"mach_port_name_t_target","mach_port_options_t_*options","uint64_t_context","mach_port_name_t_*name"}},
		{25,	"mach_port_destruct_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","mach_port_delta_t_srdelta","uint64_t_guard"}},
		{26,	"mach_reply_port",
	{"void"}},
		{27,	"thread_self_trap",
	{"void"}},
		{28,	"task_self_trap",
	{"void"}},
		{29,	"host_self_trap",
	{"void"}},
		{31,	"mach_msg_trap",
	{"mach_msg_header_t_*msg","mach_msg_option_t_option","mach_msg_size_t_send_size","mach_msg_size_t_rcv_size","mach_port_name_t_rcv_name","mach_msg_timeout_t_timeout","mach_port_name_t_notify"}},
		{32,	"mach_msg_overwrite_trap",
	{"mach_msg_header_t_*msg","mach_msg_option_t_option","mach_msg_size_t_send_size","mach_msg_size_t_rcv_size","mach_port_name_t_rcv_name","mach_msg_timeout_t_timeout","mach_port_name_t_notify","mach_msg_header_t_*rcv_msg","mach_msg_size_t_rcv_limit"}},
		{33,	"semaphore_signal_trap",
	{"mach_port_name_t_signal_name"}},
		{34,	"semaphore_signal_all_trap",
	{"mach_port_name_t_signal_name"}},
		{35,	"semaphore_signal_thread_trap",
	{"mach_port_name_t_signal_name","mach_port_name_t_thread_name"}},
		{36,	"semaphore_wait_trap",
	{"mach_port_name_t_wait_name"}},
		{37,	"semaphore_wait_signal_trap",
	{"mach_port_name_t_wait_name","mach_port_name_t_signal_name"}},
		{38,	"semaphore_timedwait_trap",
	{"mach_port_name_t_wait_name","unsigned_int_sec","clock_res_t_nsec"}},
		{39,	"semaphore_timedwait_signal_trap",
	{"mach_port_name_t_wait_name","mach_port_name_t_signal_name","unsigned_int_sec","clock_res_t_nsec"}},
		{41,	"mach_port_guard_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","uint64_t_guard","boolean_t_strict"}},
		{42,	"mach_port_unguard_trap",
	{"mach_port_name_t_target","mach_port_name_t_name","uint64_t_guard"}},
		{44,	"task_name_for_pid",
	{"mach_port_name_t_target_tport","int_pid","mach_port_name_t_*tn"}},
		{45,	"task_for_pid",
	{"mach_port_name_t_target_tport","int_pid","mach_port_name_t_*t"}},
		{46,	"pid_for_task",
	{"mach_port_name_t_t","int_*x"}},
		{48,	"macx_swapon",
	{"uint64_t_filename","int_flags","int_size","int_priority"}},
		{49,	"macx_swapoff",
	{"uint64_t_filename","int_flags"}},
		{51,	"macx_triggers",
	{"int_hi_water","int_low_water","int_flags","mach_port_t_alert_port"}},
		{52,	"macx_backing_store_suspend",
	{"boolean_t_suspend"}},
		{53,	"macx_backing_store_recovery",
	{"int_pid"}},
		{58,    "pfz_exit", 
	{"dummy"}},
		{59,	"swtch_pri",
	{"int_pri"}},
		{60,	"swtch",
	{"void"}},
		{61,	"thread_switch",
	{"mach_port_name_t_thread_name","int_option","mach_msg_timeout_t_option_time"}},
		{62,	"clock_sleep_trap",
	{"mach_port_name_t_clock_name","sleep_type_t_sleep_type","int_sleep_sec","int_sleep_nsec","mach_timespec_t_*wakeup_time"}},
		{89,	"mach_timebase_info",
	{"user_addr_t__info"}},
		{90,	"mach_wait_until",
	{"uint64_t__deadline"}},
		{91,	"mk_timer_create",
	{"int32_t_dummy"}},
		{92,	"mk_timer_destroy",
	{"mach_port_name_t__name"}},
		{93,	"mk_timer_arm",
	{"mach_port_name_t__name","uint64_t__expire_time"}},
		{94,	"mk_timer_cancel",
	{"mach_port_name_t__name","user_addr_t__result_time"}},
		{100,   "iokit_user_client",
	{"user_clientref", "index"}}
	};
	const uint64_t msc_size = sizeof(mach_syscall_table)/sizeof(struct syscall_entry);
}
